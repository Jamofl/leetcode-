package DP动态规划;
/**
 * https://leetcode-cn.com/problems/stone-game/
 * 877. 石子游戏
 * 亚历克斯和李用几堆石子在做游戏。偶数堆石子排成一行，每堆都有正整数颗石子 piles[i] 。
 *
 * 游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。
 *
 * 亚历克斯和李轮流进行，亚历克斯先开始。 每回合，玩家从行的开始或结束处取走整堆石头。 这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。
 *
 * 假设亚历克斯和李都发挥出最佳水平，当亚历克斯赢得比赛时返回 true ，当李赢得比赛时返回 false 。
 *
 *
 *
 * 示例：
 *
 * 输入：[5,3,4,5]
 * 输出：true
 * 解释：
 * 亚历克斯先开始，只能拿前 5 颗或后 5 颗石子 。
 * 假设他取了前 5 颗，这一行就变成了 [3,4,5] 。
 * 如果李拿走前 3 颗，那么剩下的是 [4,5]，亚历克斯拿走后 5 颗赢得 10 分。
 * 如果李拿走后 5 颗，那么剩下的是 [3,4]，亚历克斯拿走后 4 颗赢得 9 分。
 * 这表明，取前 5 颗石子对亚历克斯来说是一个胜利的举动，所以我们返回 true 。
 */
public class Q877石子游戏 {
    /**
     * 解法1 动态规划
     * dp[i][j]定义为从[i, j]的石子堆按规则取石头，赢家比输家多的石子的个数（最大分数差）。这里需要注意 赢家和输家可以是任意人
     * 转移方程 dp[i][j] = Math.max(piles[i] - dp[i + 1][j], piles[j] - dp[i][j - 1])
     * 即当前选手会从 从左边取之后的最大分数，从右边取之后的最大分数 二者中选一个较大的去进行操作
     *
     * 这里需要注意一下填表的顺序  当前格子依赖的是左边的格子和下面的格子，所以需要从下向上 从左到右进行填空
     * @param piles
     * @return
     */
    public boolean stoneGame(int[] piles) {
        int n = piles.length;
        int[][] dp = new int[n][n]; // dp[i][j]定义为从[i, j]的石子堆按规则取石头，赢家比输家多的石子的个数
        // 注意 当i == j 表明只剩下一堆石头 那最大分数差就是这堆石头的个数
        for (int i = 0; i < n; i ++){
            for (int j = 0; j < n; j ++){
                if (i == j)
                    dp[i][j] = piles[i];
            }
        }

        for (int i = n - 2; i >= 0; i --){
            for (int j = i + 1; j < n; j ++){
                dp[i][j] = Math.max(piles[i] - dp[i + 1][j], piles[j] - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1] > 0;
    }

    /**
     * 解法2 数学
     * 假设有 n 堆石子 奇数分成一组 偶数分成一组
     * A只需要在一开始就计算出 到底哪组的和更大。在一开始就拿走属于必胜那一组的石子，轮到B后，B没有别的选择，无论左边还是右边，都是属于同一组石子的。
     */
}
